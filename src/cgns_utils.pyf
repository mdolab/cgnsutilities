!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module libcgns_utils ! in
    interface  ! in :libcgns_utils
       module utils
        subroutine openfile(filename,mode,cellDim,cg) ! in :libcgns_utils:cgns_utilities.F90
            character*(*) intent(in) :: filename
            integer intent(in) :: mode
            integer intent(in) :: cellDim
            integer intent(out) :: cg
        end subroutine openfile
        subroutine closefile(cg) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
        end subroutine closefile
        subroutine getnblocks(cg,n) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            integer intent(out) :: n
        end subroutine getnblocks
        subroutine getgriddimension(cg,celldim) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            integer intent(out) :: celldim
        end subroutine getgriddimension
        subroutine getblockinfo(cg,iblock,zonename,dims,nboco,nb2b) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            integer intent(in) :: iblock
            character*512 intent(out) :: zonename
            integer dimension(3),intent(out) :: dims
            integer intent(out) :: nboco
            integer intent(out) :: nb2b
        end subroutine getblockinfo
        subroutine getbcinfo(cg,iblock,ibc,celldim,boconame,bocotype,ptrange,family,ndataset,bocouserdefined) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            integer intent(in) :: iblock
            integer intent(in) :: ibc
            integer intent(in) :: celldim
            character*256 intent(out) :: boconame
            integer intent(out) :: bocotype
            integer dimension(3,2),intent(out) :: ptrange
            character*256 intent(out) :: family
            integer intent(out) :: ndataset
            character*256 intent(out) :: bocouserdefined
        end subroutine getbcinfo
        subroutine getbcdatasetinfo(cg,iblock,ibc,ibcdataset,bocodatasetname,bocotype,ndirichletarrays,nneumannarrays) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            integer intent(in) :: iblock
            integer intent(in) :: ibc
            integer intent(in) :: ibcdataset
            character*256 intent(out) :: bocodatasetname
            integer intent(out) :: bocotype
            integer intent(out) :: ndirichletarrays
            integer intent(out) :: nneumannarrays
        end subroutine getbcdatasetinfo
        subroutine getbcdataarrayinfo(cg,iblock,ibc,ibcdataset,idataarr,flagdirneu,dataarrayname,datatype,ndatadimensions,datadimensionvector) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            integer intent(in) :: iblock
            integer intent(in) :: ibc
            integer intent(in) :: ibcdataset
            integer intent(in) :: idataarr
            integer intent(in) :: flagdirneu
            character*256 intent(out) :: dataarrayname
            integer intent(out) :: datatype
            integer intent(out) :: ndatadimensions
            integer intent(out), dimension(3) :: datadimensionvector
        end subroutine getbcdataarrayinfo
        subroutine getbcdataarray(cg,iblock,ibc,ibcdataset,idataarr,flagdirneu, dataarr,ndataarr) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            integer intent(in) :: iblock
            integer intent(in) :: ibc
            integer intent(in) :: ibcdataset
            integer intent(in) :: idataarr
            integer intent(in) :: flagdirneu
            real(kind=8) intent(inout), dimension(ndataarr) :: dataarr
            integer intent(in) :: ndataarr
        end subroutine getbcdataarray
        subroutine getb2binfo(cg,iblock,ib2b,connectname,donorname,ptrange,donorrange,transform) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            integer intent(in) :: iblock
            integer intent(in) :: ib2b
            character*256 intent(out) :: connectname
            character*256 intent(out) :: donorname
            integer dimension(3,2),intent(out) :: ptrange
            integer dimension(3,2),intent(out) :: donorrange
            integer dimension(3),intent(out) :: transform
        end subroutine getb2binfo
        subroutine getconvinfo(cg, niterations, narrays) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            integer intent(out) :: niterations, narrays
        end subroutine getconvinfo
        subroutine getconvarray(cg, niterations, arrayID, arrayName, arrayData)
            integer intent(in) :: cg
            integer intent(in) :: niterations, arrayID
            character*256 intent(out) :: arrayName
            real(kind=8) dimension(niterations),intent(out),depend(niterations) :: arrayData
        end subroutine getconvarray
        subroutine getcoordinates(cg,iblock,il,jl,kl,x) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            integer intent(in) :: iblock
            integer intent(in) :: il
            integer intent(in) :: jl
            integer intent(in) :: kl
            real(kind=8) dimension(il,jl,kl,3),intent(out),depend(il,jl,kl) :: x
        end subroutine getcoordinates
        subroutine writezone(cg,zonename,dims,zoneid) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            character*(*) intent(in) :: zonename
            integer dimension(3),intent(in) :: dims
            integer intent(out) :: zoneid
        end subroutine writezone
        subroutine writecoordinates(cg,iblock,il,jl,kl,x) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            integer intent(in) :: iblock
            integer, optional,intent(in),check(shape(x,0)==il),depend(x) :: il=shape(x,0)
            integer, optional,intent(in),check(shape(x,1)==jl),depend(x) :: jl=shape(x,1)
            integer, optional,intent(in),check(shape(x,2)==kl),depend(x) :: kl=shape(x,2)
            real(kind=8) dimension(il,jl,kl,3),intent(in) :: x
        end subroutine writecoordinates
        subroutine writebc(cg,iblock,bcname,bcfam,ptrange,bctype,bcuserdefined,bcout) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            integer intent(in) :: iblock
            character*(*) intent(in) :: bcname
            character*(*) intent(in) :: bcfam
            integer dimension(3,2),intent(in) :: ptrange
            integer intent(in) :: bctype
            character*(*) intent(in) :: bcuserdefined
            integer intent(out) :: bcout
        end subroutine writebc
        subroutine writebcdataheader(cg,iblock,bctype,ibc,datasetname,idataset) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            integer intent(in) :: iblock
            integer intent(in) :: bctype
            integer intent(in) :: ibc
            character*(*) intent(in) :: datasetname
            integer intent(out) :: idataset
        end subroutine writebcdataheader
        subroutine writebcdata(cg,iblock,ibc,idataset,flagdirneu,writeheader,dataarrayname,datatype,ndatadimensions,datadimensionvector,dataarr,ndataarr) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            integer intent(in) :: iblock
            integer intent(in) :: ibc
            integer intent(in) :: idataset
            integer intent(in) :: flagdirneu
            logical intent(in) :: writeheader
            character*(*) intent(in) :: dataarrayname
            integer intent(in) :: datatype
            integer intent(in) :: ndatadimensions
            real(kind=8) intent(in) :: datavalue
            integer, intent(in), dimension(3) :: datadimensionvector
            real(kind=8), intent(in), dimension(ndataarr) :: dataarr
            integer intent(in) :: ndataarr
        end subroutine writebcdata
        subroutine writeb2b(cg,iblock,connectname,donorname,pts,ptsdonor,transform) ! in :libcgns_utils:cgns_utilities.F90
            integer intent(in) :: cg
            integer intent(in) :: iblock
            character*(*) intent(in) :: connectname
            character*(*) intent(in) :: donorname
            integer dimension(3,2),intent(in) :: pts
            integer dimension(3,2),intent(in) :: ptsdonor
            integer dimension(3),intent(in) :: transform
        end subroutine writeb2b
        subroutine refine(xin,xout, refinex, refiney, refinez,il,jl,kl)
            ! in :libcgns_utils:cgns_utilities.F90
            real(kind=8) dimension(il,jl,kl,3),intent(in) :: xin
            integer, intent(in) :: refinex
            integer, intent(in) :: refiney
            integer, intent(in) :: refinez
            real(kind=8) dimension((il-1)*pow(2,refinex)+1, (jl-1)*pow(2,refiney)+1, (kl-1)*pow(2,refinez)+1, 3),intent(out),depend(il,jl,kl) :: xout
            integer, optional,intent(in),check(shape(xin,0)==il),depend(xin) :: il=shape(xin,0)
            integer, optional,intent(in),check(shape(xin,1)==jl),depend(xin) :: jl=shape(xin,1)
            integer, optional,intent(in),check(shape(xin,2)==kl),depend(xin) :: kl=shape(xin,2)
        end subroutine refine
        subroutine interpedge(xcoarse,xfine,il) ! in :libcgns_utils:cgns_utilities.F90
            real(kind=8) dimension(il,3),intent(in) :: xcoarse
            real(kind=8) dimension(2 * il - 1,3),intent(inout),depend(il) :: xfine
            integer, optional,intent(in),check(shape(xcoarse,0)==il),depend(xcoarse) :: il=shape(xcoarse,0)
        end subroutine interpedge
        subroutine interpface(xcoarse,xfine,il,jl) ! in :libcgns_utils:cgns_utilities.F90
            real(kind=8) dimension(il,jl,3),intent(in) :: xcoarse
            real(kind=8) dimension(2 * il - 1,2 * jl - 1,3),intent(inout),depend(il,jl) :: xfine
            integer, optional,intent(in),check(shape(xcoarse,0)==il),depend(xcoarse) :: il=shape(xcoarse,0)
            integer, optional,intent(in),check(shape(xcoarse,1)==jl),depend(xcoarse) :: jl=shape(xcoarse,1)
        end subroutine interpface
        ! subroutine time_combine(filenames,nfiles,outputfile) ! in :test:cgns_utilities.F90
        !     use zone_vars
        !     character dimension(nfiles,256),intent(c) :: filenames
        !     integer, optional,check(shape(filenames,0)==nfiles),depend(filenames) :: nfiles=shape(filenames,0)
	!     character*256 :: outputfile
        ! end subroutine time_combine
        subroutine computeconnectivity(coords,ncoords,sizes,nblock,tol) ! in :test:cgns_utilities.F90
            real(kind=8), target,dimension(3 * ncoords),intent(in) :: coords
            integer, optional,intent(in),check((len(coords))/(3)>=ncoords),depend(coords) :: ncoords=(len(coords))/(3)
            integer dimension(3,nblock),intent(in) :: sizes
            integer, optional,intent(in),check(shape(sizes,1)==nblock),depend(sizes) :: nblock=shape(sizes,1)
            real(kind=8), intent(in) :: tol
        end subroutine computeconnectivity
        subroutine getnpatches(n)
          integer, intent(out) :: n
        end subroutine getnpatches
        subroutine getpatchinfo(n,types,pointranges,myids,pointrangedonors,transforms,donorids,faceavgs,facenormals) ! in :test:cgns_utilities.F90
            integer intent(in) :: n
            integer dimension(n),intent(out),depend(n) :: types
            integer dimension(3,2,n),intent(out),depend(n) :: pointranges
            integer dimension(n),intent(out),depend(n) :: myids
            integer dimension(3,2,n),intent(out),depend(n) :: pointrangedonors
            integer dimension(3,n),intent(out),depend(n) :: transforms
            integer dimension(n),intent(out),depend(n) :: donorids
            real(kind=8) dimension(3,n),intent(out),depend(n) :: faceavgs
            real(kind=8) dimension(3,n),intent(out),depend(n) :: facenormals
        end subroutine getpatchinfo
        subroutine deallocpatches()
        end subroutine deallocpatches
        subroutine findbounds(x, xBounds, il, jl, kl) ! in :libcgns_utils:cgns_utilities.F90
            real(kind=8) dimension(il,jl,kl,3),intent(in) :: x
            real(kind=8) dimension(2,3), intent(inout) :: xBounds
            integer, optional,intent(in),check(shape(x,0)==il),depend(x) :: il=shape(x,0)
            integer, optional,intent(in),check(shape(x,1)==jl),depend(x) :: jl=shape(x,1)
            integer, optional,intent(in),check(shape(x,2)==kl),depend(x) :: kl=shape(x,2)
        end subroutine findbounds
        subroutine computevolumes(x, xBounds, binVolX, binVolY, binVolZ, binCellsX, binCellsY, binCellsZ, il, jl, kl, nBinX, nBinY, nBinZ) ! in :libcgns_utils:cgns_utilities.F90
            real(kind=8) dimension(il,jl,kl,3),intent(in) :: x
            real(kind=8) dimension(2,3), intent(in) :: xBounds
            real(kind=8) dimension(nBinX), intent(inout) :: binVolX
            real(kind=8) dimension(nBinY), intent(inout) :: binVolY
            real(kind=8) dimension(nBinZ), intent(inout) :: binVolZ
            integer(kind=8) dimension(nBinX), intent(inout) :: binCellsX
            integer(kind=8) dimension(nBinY), intent(inout) :: binCellsY
            integer(kind=8) dimension(nBinZ), intent(inout) :: binCellsZ
            integer, optional,intent(in),check(shape(x,0)==il),depend(x) :: il=shape(x,0)
            integer, optional,intent(in),check(shape(x,1)==jl),depend(x) :: jl=shape(x,1)
            integer, optional,intent(in),check(shape(x,2)==kl),depend(x) :: kl=shape(x,2)
            integer, optional,intent(in),check(shape(binVolX,0)==nBinX),depend(binVolX) :: nBinX=shape(binVolX,0)
            integer, optional,intent(in),check(shape(binVolY,0)==nBinY),depend(binVolY) :: nBinY=shape(binVolY,0)
            integer, optional,intent(in),check(shape(binVolZ,0)==nBinZ),depend(binVolZ) :: nBinZ=shape(binVolZ,0)
        end subroutine computevolumes
        subroutine calcgridratio(n,s0,s,ratio) ! in :test:cgns_utilities.F90
            integer(kind=4) intent(in) :: n
            real(kind=8) intent(in) :: s0
            real(kind=8) intent(in) :: s
            real(kind=8) intent(out) :: ratio
        end subroutine calcgridratio
        subroutine convertplot3d(pfile, cfile)
            character*(*) intent(in) :: pfile
            character*(*) intent(in) :: cfile
          end subroutine convertplot3d
        end module utils
    end interface
end python module libcgns_utils

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
